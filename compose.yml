
services:
  fanout:
    image: ghcr.io/kingpin/fanout:latest
    # Build from local Dockerfile if needed
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #   platforms:
    #     - linux/amd64
    #     - linux/arm64

    # Container name for easier reference
    container_name: fanout

    # Restart policy
    restart: unless-stopped

    # Port mapping
    ports:
      - "8080:8080"

    # Resource limits - Adjust based on workload requirements
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

    # Health check configuration - Calls the built-in healthcheck endpoint
    healthcheck:
      test: ["CMD", "/fanout", "-healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

    # Environment variables
    environment:
      # Core Configuration
      - TARGETS=https://primary.service,https://secondary.service  # Required: Comma-separated target URLs or "localonly"
      - PORT=8080                                                 # Optional: Server port (default: 8080)
      
      # Request Handling
      - MAX_BODY_SIZE=10MB                                       # Optional: Maximum request body size (default: 10MB)
      - REQUEST_TIMEOUT=30s                                      # Optional: Global request timeout (default: 30s)
      - CLIENT_TIMEOUT=10s                                       # Optional: Per-target timeout (default: 10s)
      - MAX_RETRIES=3                                            # Optional: Maximum retry attempts for failed requests (default: 3)
      
      # Endpoint Configuration
      - ENDPOINT_PATH=/fanout                                    # Optional: Custom endpoint path (default: /fanout)
      
      # Echo Mode Configuration
      - ECHO_MODE_HEADER=false                                   # Optional: Add diagnostic headers in echo mode
      - ECHO_MODE_RESPONSE=simple                                # Optional: Echo response format (simple/full)
      
      # Monitoring
      - METRICS_ENABLED=true                                     # Optional: Enable Prometheus metrics endpoint
      
      # Security Settings
      - SENSITIVE_HEADERS=Authorization,X-API-Key                # Optional: Additional sensitive headers to monitor
      
      # Operational Settings
      - TZ=UTC                                                   # Optional: Container timezone (default: UTC)
      
      # OpenTelemetry Configuration
      - OTEL_ENABLED=false                                      # Optional: Enable OpenTelemetry tracing (default: false)
      - OTEL_SERVICE_NAME=fanout                                # Optional: Service name for telemetry (default: fanout)
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317         # Optional: OTLP endpoint (default: localhost:4317)
      - OTEL_EXPORTER_OTLP_INSECURE=true                        # Optional: Use insecure connection (default: true)
      - OTEL_TRACE_SAMPLING_RATIO=1.0                           # Optional: Sampling ratio 0.0-1.0 (default: 1.0)
      - OTEL_PROPAGATORS=tracecontext,baggage                   # Optional: Context propagators (default: tracecontext,baggage)

    # Volume mounts (unused for now)
    #   - ./cofigs:/configs:ro                                 # Optional: Mount custom configurations

    # Network configuration
    networks:
      - fanout-net

  # OpenTelemetry Collector (optional, for local development)
  otel-collector:
    image: otel/opentelemetry-collector:0.70.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "55679:55679" # zpages extension

# Define custom network
networks:
  fanout-net: